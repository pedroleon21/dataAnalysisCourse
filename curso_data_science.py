# -*- coding: utf-8 -*-
"""curso_data_science.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mn8YltO0crncnrHSwsJQ2JoZDCsDG2-Z
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
notas = pd.read_csv('ratings.csv')
filmes = pd.read_csv('movies.csv')
tmdb = pd.read_csv('tmdb_5000_movies.csv')
filmes.columns = ['filme_id','titulo','genero']
notas.columns = ['user_id','filme_id','nota','momento']

notas.nota.describe()



tmdb.original_language.unique()

tmdb.original_language.value_counts()

tmdb.original_language.value_counts().values

lang =tmdb.original_language.value_counts().to_frame().reset_index()
lang.colunms = ['original_language','total']
lang.head()

sns.barplot(y='original_language',x='index',data = lang)

sns.catplot(x='original_language', kind = 'count', data = tmdb)

plt.pie(lang.original_language, labels = lang['index'])

total_lang = tmdb.original_language.value_counts()
total = total_lang.sum()
total_en = total_lang.loc['en']
total_res = total - total_en
print(total_en,total_res)

dados = {
    'lingua' : ['en', 'other'],
    'total' : [total_en, total_res]
}
dados = pd.DataFrame(dados)
sns.barplot(x='lingua', y='total', data= dados)

plt.pie(dados.total, labels = dados.lingua)



total_not_en_lang = tmdb.query('original_language != "en"').original_language.value_counts().reset_index()
total_not_en_lang.columns = ['original_language','total']
total_not_en_lang

sns.catplot(x= "original_language",y = 'total',  data = total_not_en_lang, aspect = 2, kind = "bar",palette= 'GnBu_d')

filmes.head(2)

notas.head()

notas_toystory = notas.query('filme_id == 1')
notas_jumanji = notas.query('filme_id == 2')
print(len(notas_jumanji),len(notas_toystory))

filme1 = np.append(np.array([2.5]*10),np.array([3.5]*10))
filme2 = np.append(np.array([5]*10),np.array([1]*10))

print('m√©dia:   ',filme1.mean(),filme2.mean())
print('mediana: ',np.median(filme1),np.median(filme2))
print('desvio:  ',np.std(filme1),np.std(filme2))

sns.distplot(filme1)
sns.distplot(filme2)

plt.hist(filme1)
plt.hist(filme2)

plt.boxplot(filme1)
plt.boxplot(filme2)

plt.boxplot(notas_toystory.nota)
plt.boxplot(notas_jumanji.nota,)

sns.boxplot(x='filme_id',y='nota',data = notas.query('filme_id in [1,2,3,4,5]'))

notas_jumanji.nota.std(),notas_toystory.nota.std()